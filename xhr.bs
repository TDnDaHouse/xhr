<!doctype html>
<html lang=en-US>
<meta charset=utf-8>
<meta content=width=device-width,initial-scale=1,shrink-to-fit=no name=viewport>
<meta content=#3c790a name=theme-color>
<title>XMLHttpRequest Standard</title>
<link href=https://resources.whatwg.org/standard.css rel=stylesheet>
<link href=https://resources.whatwg.org/logo-xhr.svg rel=icon>

<div class="head">

<p><a class=logo href=https://whatwg.org/><img alt=WHATWG src=https://resources.whatwg.org/logo-xhr.svg width=100 height=100></a>
<h1 id="xmlhttprequest-ls">XMLHttpRequest</h1>
<h2 class="no-num no-toc">Living Standard &mdash; Last Updated [DATE: 3 August 2002]</h2>

<dl>
 <dt>Participate:
 <dd><a href=https://github.com/whatwg/xhr>GitHub whatwg/xhr</a>
 (<a href=https://github.com/whatwg/xhr/issues/new>file an issue</a>,
 <a href=https://github.com/whatwg/xhr/issues>open issues</a>,
 <a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=WebAppsWG&amp;component=XHR&amp;resolution=---">legacy open bugs</a>)
 <dd><a href=https://wiki.whatwg.org/wiki/IRC>IRC: #whatwg on Freenode</a>

 <dt>Commits:
 <dd><a href=https://github.com/whatwg/xhr/commits>GitHub whatwg/xhr/commits</a>
 <dd><a href=https://twitter.com/xhrstandard>@xhrstandard</a>

 <dt id=xmlhttprequest-tests>Tests:
 <dd><a href=https://w3c-test.org/XMLHttpRequest/>XMLHttpRequest tests</a> are hosted in
  the <a href="https://github.com/w3c/web-platform-tests/">W3C Web platform testsuite</a>
  &mdash; contributions welcome!

 <dt>Translation <small>(non-normative)</small>:
 <dd title=Japanese><a href=https://triple-underscore.github.io/XHR-ja.html lang=ja hreflang=ja>日本語</a>
</dl>

<script src=https://resources.whatwg.org/file-issue.js async></script>
<script src=annotate_spec.js async></script>
<script id=head src=https://resources.whatwg.org/dfn.js defer></script>

</div>



<h2 class="no-num no-toc" id=specabstract>Abstract</h2>

<p>XMLHttpRequest defines an API that provides scripted client functionality for
transferring data between a client and a server.



<h2 class="no-num no-toc" id=toc>Table of Contents</h2>

<!--toc-->



<h2 id=introduction>Introduction</h2>

<p><em>This section is non-normative.</em>

<p>The <code>XMLHttpRequest</code> object is an API for
<a>fetching</a> resources.

<p>The name <code>XMLHttpRequest</code> is historical and has no bearing on its
functionality.

<div id=example-xhr class=example>
 <p>Some simple code to do something with data from an XML document
 fetched over the network:

 <pre><code>function processData(data) {
  // taking care of data
}

function handler() {
  if(this.status == 200 &amp;&amp;
    this.responseXML != null &amp;&amp;
    this.responseXML.getElementById('test').textContent) {
    // success!
    processData(this.responseXML.getElementById('test').textContent);
  } else {
    // something went wrong
    …
  }
}

var client = new XMLHttpRequest();
client.onload = handler;
client.open("GET", "unicorn.xml");
client.send();</code></pre>

 <p>If you just want to log a message to the server:

 <pre><code>function log(message) {
  var client = new XMLHttpRequest();
  client.open("POST", "/log");
  client.setRequestHeader("Content-Type", "text/plain;charset=UTF-8");
  client.send(message);
}</code></pre>

 <p>Or if you want to check the status of a document on the server:

 <pre><code>function fetchStatus(address) {
  var client = new XMLHttpRequest();
  client.onload = function() {
    // in case of network errors this might not give reliable results
    returnStatus(this.status);
  }
  client.open("HEAD", address);
  client.send();
}</code></pre>
</div>


<h3 id=specification-history>Specification history</h3>

<p>The <code>XMLHttpRequest</code> object was initially defined as part of
the WHATWG's HTML effort. (Based on Microsoft's implementation many years prior.)
It moved to the W3C in 2006. Extensions (e.g. progress events and
cross-origin requests) to <code>XMLHttpRequest</code> were developed in a
separate draft (XMLHttpRequest Level 2) until end of 2011, at which point
the two drafts were merged and <code>XMLHttpRequest</code> became a single
entity again from a standards perspective. End of 2012 it moved back to the
WHATWG.

<p>Discussion that led to the current draft can be found in the following mailing list
archives:

<ul class=brief>
 <li><a href=https://lists.w3.org/Archives/Public/public-whatwg-archive/>whatwg@whatwg.org</a>
 <li><a href=https://lists.w3.org/Archives/Public/public-webapps/>public-webapps@w3.org</a>
 <li><a href=https://lists.w3.org/Archives/Public/public-webapi/>public-webapi@w3.org</a>
 <li><a href=https://lists.w3.org/Archives/Public/public-appformats/>public-appformats@w3.org</a>
</ul>



<h2 id=conformance>Conformance</h2>

<p>All diagrams, examples, and notes in this specification are
non-normative, as are all sections explicitly marked non-normative.
Everything else in this specification is normative.

<p>The key words "MUST", "MUST NOT", "REQUIRED", <!--"SHALL", "SHALL
NOT",--> "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and
"OPTIONAL" in the normative parts of this specification are to be
interpreted as described in RFC2119. For readability, these words do
not appear in all uppercase letters in this specification.
[[!RFC2119]]


<h3 id=extensibility>Extensibility</h3>

<p>User agents, Working Groups, and other interested parties are
<em>strongly encouraged</em> to discuss new features with the WHATWG
community.



<h2 id=terminology>Terminology</h2>

<p>This specification uses terminology, cross-linked throughout, from DOM,
DOM Parsing and Serialization, Encoding, Fetch, File API, HTML, HTTP, URL, Web IDL, and
XML.

[[!DOM]]
[[!DOMPS]]
[[!ENCODING]]
[[!FETCH]]
[[!FILEAPI]]
[[!HTML]]
[[!HTTP]]
[[!URL]]
[[!WEBIDL]]
[[!XML]] [[!XMLNS]]

<p>It uses the typographic conventions from HTML. [[!HTML]]

<p>The term <dfn>user credentials</dfn> for the purposes of this
specification means cookies, HTTP authentication, and TLS client certificates.
Specifically it does not refer to proxy authentication or the
<a><code>Origin</code></a> header.
[[!COOKIES]] <!-- XXX ref? -->



<h2 id=interface-xmlhttprequest>Interface <code>XMLHttpRequest</code></h2>

<pre class=idl>[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequestEventTarget : EventTarget {
  // event handlers
  attribute EventHandler onloadstart;
  attribute EventHandler onprogress;
  attribute EventHandler onabort;
  attribute EventHandler onerror;
  attribute EventHandler onload;
  attribute EventHandler ontimeout;
  attribute EventHandler onloadend;
};

[Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequestUpload : XMLHttpRequestEventTarget {
};

enum XMLHttpRequestResponseType {
  "",
  "arraybuffer",
  "blob",
  "document",
  "json",
  "text"
};

[Constructor,
 Exposed=(Window,DedicatedWorker,SharedWorker)]
interface XMLHttpRequest : XMLHttpRequestEventTarget {
  // event handler
  attribute EventHandler onreadystatechange;

  // states
  const unsigned short UNSENT = 0;
  const unsigned short OPENED = 1;
  const unsigned short HEADERS_RECEIVED = 2;
  const unsigned short LOADING = 3;
  const unsigned short DONE = 4;
  readonly attribute unsigned short readyState;

  // request
  void open(ByteString method, USVString url);
  void open(ByteString method, USVString url, boolean async, optional USVString? username = null, optional USVString? password = null);
  void setRequestHeader(ByteString name, ByteString value);
           attribute unsigned long timeout;
           attribute boolean withCredentials;
  [SameObject] readonly attribute XMLHttpRequestUpload upload;
  void send(optional (Document or BodyInit)? body = null);
  void abort();

  // response
  readonly attribute USVString responseURL;
  readonly attribute unsigned short status;
  readonly attribute ByteString statusText;
  ByteString? getResponseHeader(ByteString name);
  ByteString getAllResponseHeaders();
  void overrideMimeType(DOMString mime);
           attribute XMLHttpRequestResponseType responseType;
  readonly attribute any response;
  readonly attribute USVString responseText;
  [Exposed=Window] readonly attribute Document? responseXML;
};</pre>

<p>An <code>XMLHttpRequest</code> object has an associated
<code>XMLHttpRequestUpload</code> object.

<p>An <code>XMLHttpRequest</code> object has an associated
<dfn>state</dfn>, which is one of
<i>unsent</i>,
<i>opened</i>,
<i>headers received</i>,
<i>loading</i>, and
<i>done</i>. Unless stated otherwise it is <i>unsent</i>.

<p>An <code>XMLHttpRequest</code> object has an associated
<dfn id=send-flag><code>send()</code> flag</dfn>. Unless stated otherwise it is unset.

<p>An <code>XMLHttpRequest</code> object has an associated <dfn>stop timeout flag</dfn>.
Unless stated otherwise it is unset.


<h3 id=constructors>Constructors</h3>

<dl class=domintro>
 <dt><code><var>client</var> = new <a lt="dom XMLHttpRequest">XMLHttpRequest</a>()</code>
 <dd>Returns a new <code>XMLHttpRequest</code> object.
</dl>

<p>The <dfn lt="dom XMLHttpRequest"><code>XMLHttpRequest()</code></dfn> constructor, when
invoked, must return a new <code>XMLHttpRequest</code> object.


<h3 id=garbage-collection>Garbage collection</h3>
<!-- Based on EventSource and WebSocket. Not sure what I am doing. -->

<p>An <code>XMLHttpRequest</code> object must not be garbage collected if its
<a>state</a> is either
<i>opened</i> with the <a><code>send()</code> flag</a> set,
<i>headers received</i>, or <i>loading</i>, and it has one or more
<a>event listeners</a>
registered whose <b>type</b> is one of
<a><code>readystatechange</code></a>,
<a><code>progress</code></a>,
<a><code>abort</code></a>,
<a><code>error</code></a>,
<a><code>load</code></a>,
<a><code>timeout</code></a>, and
<a><code>loadend</code></a>.
<!-- No need to mention upload event listeners as they happen during /opened/. -->

<p>If an <code>XMLHttpRequest</code> object is garbage collected while its
connection is still open, the user agent must <a>terminate the request</a>.


<h3 id=event-handlers>Event handlers</h3>

<p>The following are the
<a>event handlers</a> (and their corresponding
<a>event handler event types</a>)
that must be supported on objects implementing an interface that inherits
from <code>XMLHttpRequestEventTarget</code> as attributes:

<table>
 <thead>
  <tr>
   <th><a lt="event handlers">event handler</a>
   <th><a>event handler event type</a>
 <tbody>
  <tr>
   <td><dfn lt="handler xhr onloadstart"><code>onloadstart</code></dfn>
   <td><a><code>loadstart</code></a>
  <tr>
   <td><dfn lt="handler xhr onprogress"><code>onprogress</code></dfn>
   <td><a><code>progress</code></a>
  <tr>
   <td><dfn lt="handler xhr onabort"><code>onabort</code></dfn>
   <td><a><code>abort</code></a>
  <tr>
   <td><dfn lt="handler xhr onerror"><code>onerror</code></dfn>
   <td><a><code>error</code></a>
  <tr>
   <td><dfn lt="handler xhr onload"><code>onload</code></dfn>
   <td><a><code>load</code></a>
  <tr>
   <td><dfn lt="handler xhr ontimeout"><code>ontimeout</code></dfn>
   <td><a><code>timeout</code></a>
  <tr>
   <td><dfn lt="handler xhr onloadend"><code>onloadend</code></dfn>
   <td><a><code>loadend</code></a>
</table>

<p>The following is the
<a lt="event handlers">event handler</a>
(and its corresponding
<a>event handler event type</a>) that must be
supported as attribute solely by the
<code>XMLHttpRequest</code> object:

<table>
 <thead>
  <tr>
   <th><a lt="event handlers">event handler</a>
   <th><a>event handler event type</a>
 <tbody>
  <tr>
   <td><dfn lt="handler xhr onreadystatechange"><code>onreadystatechange</code></dfn>
   <td><a><code>readystatechange</code></a>
</table>


<h3 id=states>States</h3>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest readyState">readyState</a></code>
 <dd><p>Returns <var>client</var>'s
 <a>state</a>.
</dl>

<p>The <dfn lt="dom XMLHttpRequest readyState"><code>readyState</code></dfn>
attribute's getter must return the value from the table below in the cell of the second
column, from the row where the value in the cell in the first column is
<a>context object</a>'s
<a>state</a>:

<table>
 <tbody><tr>
  <td><i>unsent</i>
  <td><dfn lt="dom XMLHttpRequest UNSENT"><code>UNSENT</code></dfn> (numeric value 0)
  <td>The object has been constructed.
 <tr>
  <td><i>opened</i>
  <td><dfn lt="dom XMLHttpRequest OPENED"><code>OPENED</code></dfn> (numeric value 1)
  <td>The <a><code>open()</code></a> method has been successfully
   invoked. During this state request headers can be set using
   <a><code>setRequestHeader()</code></a> and the
   fetch can be initiated using the <a><code>send()</code></a>
   method.
 <tr>
  <td><i>headers received</i>
  <td><dfn lt="dom XMLHttpRequest HEADERS_RECEIVED"><code>HEADERS_RECEIVED</code></dfn>
   (numeric value 2)
  <td>All redirects (if any) have been followed and all HTTP headers of the
   <a>response</a> have been received.
 <tr>
  <td><i>loading</i>
  <td><dfn lt="dom XMLHttpRequest LOADING"><code>LOADING</code></dfn> (numeric value 3)
  <td>The <a>response</a>'s
  <a>body</a> is being received.
 <tr>
  <td><i>done</i>
  <td><dfn lt="dom XMLHttpRequest DONE"><code>DONE</code></dfn> (numeric value 4)
  <td>The data transfer has been completed or something went wrong during the transfer
   (e.g. infinite redirects).
</table>


<h3 id=request>Request</h3>

<p>Each <code>XMLHttpRequest</code> object has the following
request-associated concepts:

<dfn>request method</dfn>,
<dfn>request URL</dfn>,
<dfn id=author-request-headers>author request headers</dfn>,
<dfn>request body</dfn>,
<dfn>synchronous flag</dfn>,
<dfn id=upload-complete-flag>upload complete flag</dfn>, and
<dfn>upload listener flag</dfn>.

<p>The <a>author request headers</a> is an initially empty
<a>header list</a>.

<p>The <a>request body</a> is initially null.

<p>The <a>synchronous flag</a>, <a>upload complete flag</a>, and
<a>upload listener flag</a> are initially unset.

<hr>

<p>To <dfn>terminate the request</dfn>,
<a>terminate</a> the
<a>fetch</a> algorithm operated by the
<code>XMLHttpRequest</code> object with reason <i>fatal</i>.



<h4 id=the-open()-method>The <code>open()</code> method</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest open">open</a>(<var>method</var>, <var>url</var> [, <var>async</var> = true [, <var>username</var> = null [, <var>password</var> = null]]])</code>

 <dd>
  <p>Sets the <a>request method</a>, <a>request URL</a>, and
  <a>synchronous flag</a>.

  <p>Throws a <code>SyntaxError</code> exception if
  either <var>method</var> is not a valid HTTP method or
  <var>url</var> cannot be parsed.

  <p>Throws a <code>SecurityError</code> exception
  if <var>method</var> is a case-insensitive match for
  `<code>CONNECT</code>`, `<code>TRACE</code>` or `<code>TRACK</code>`.

  <p>Throws an <code>InvalidAccessError</code> exception if <var>async</var> is false,
  <a>entry settings object</a>'s
  <a>global object</a> is a <code>Window</code>
  object, and the <a><code>timeout</code></a> attribute is not zero or the
  <a><code>responseType</code></a> attribute is not the empty string.
</dl>

<p class="critical no-backref" id=sync-warning>Synchronous <code>XMLHttpRequest</code>
outside of workers is in the process of being removed from the web platform as it has
detrimental effects to the end user's experience. (This is a long process that takes many
years.) Developers must not pass false for the <var>async</var> argument when
<a>entry settings object</a>'s
<a>global object</a> is a <code>Window</code>
object. User agents are strongly encouraged to warn about such usage in developer tools and may
experiment with <a lt=throw>throwing</a> an
<code>InvalidAccessError</code> exception when it occurs.

<p>The
<dfn id=dom-xmlhttprequest-open lt="dom XMLHttpRequest open"><code>open(<var>method</var>, <var>url</var>, <var>async</var>, <var>username</var>, <var>password</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>If <a>context object</a>'s
 <a>relevant settings object</a> has a
 <a>responsible document</a> and it is <em>not</em>
 <a>fully active</a>,
 <a lt=throw>throw</a> an <code>InvalidStateError</code> exception.

 <li><p>If <var>method</var> is not a
 <a>method</a>,
 <a lt=throw>throw</a> a
 <code>SyntaxError</code> exception.

 <li><p>If <var>method</var> is a <a>forbidden method</a>,
 <a lt=throw>throw</a> a
 <code>SecurityError</code> exception.

 <li><p><a>Normalize</a>
 <var>method</var>.

 <li><p>Let <var>parsedURL</var> be the result of
 <a>parsing</a> <var>url</var> with
 <a>context object</a>'s
 <a>relevant settings object</a>'s
 <a>API base URL</a>.

 <li><p>If <var>parsedURL</var> is failure,
 <a lt=throw>throw</a> a
 <code>SyntaxError</code> exception.

 <li>
  <p>If the <var>async</var> argument is omitted, set <var>async</var> to true, and set
  <var>username</var> and <var>password</var> to null.

  <p class=note>Unfortunately legacy content prevents treating the <var>async</var>
  argument being <code>undefined</code> identical from it being omitted.

 <li>
  <p>If <var>parsedURL</var>'s <a>host</a>
  is non-null, run these substeps:

  <ol>
   <li><p>If the <var>username</var> argument is not null,
   <a>set the username</a> given <var>parsedURL</var> and
   <var>username</var>.

   <li><p>If the <var>password</var> argument is not null,
   <a>set the password</a> given <var>parsedURL</var> and
   <var>password</var>.
  </ol>

 <li><p>If <var>async</var> is false, <a>entry settings object</a>'s
 <a>global object</a> is a <code>Window</code>
 object, and the <a><code>timeout</code></a> attribute value is not zero
 or the <a><code>responseType</code></a> attribute value is not the
 empty string, then <a lt=throw>throw</a> an
 <code>InvalidAccessError</code> exception.

 <li>
  <p><a>Terminate the request</a>.

  <p class=note>A <a>fetch</a> can be
  ongoing at this point.

 <li>
  <p>Set variables associated with the object as follows:

  <ul>
   <li><p>Unset the <a><code>send()</code> flag</a>, <a>stop timeout flag</a>, and
   <a>upload listener flag</a>.
   <li><p>Set <a>request method</a> to <var>method</var>.
   <li><p>Set <a>request URL</a> to <var>parsedURL</var>.
   <li><p>Set the <a>synchronous flag</a>, if <var>async</var> is false, and unset
   the <a>synchronous flag</a> otherwise.
   <li><p>Empty <a>author request headers</a>.
   <li><p>Set <a>response</a> to a
   <a>network error</a>.
   <li><p>Set <a>received bytes</a> to the empty byte sequence.
   <li><p>Set <a>response <code>ArrayBuffer</code> object</a> to null.
   <li><p>Set <a>response <code>Blob</code> object</a> to null.
   <li><p>Set <a>response <code>Document</code> object</a> to null.
   <li><p>Set <a>response JSON object</a> to null.
  </ul>

 <li>
  <p>If the <a>state</a> is not
  <i>opened</i>, run these substeps:

  <ol>
   <li><p>Set <a>state</a> to
   <i>opened</i>.

   <li><p><a>Fire an event</a> named <a><code>readystatechange</code></a>.
  </ol>
</ol>



<h4 id=the-setrequestheader()-method>The <code>setRequestHeader()</code> method</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest setRequestHeader">setRequestHeader</a>(<var>name</var>, <var>value</var>)</code>

 <dd>
  <p>Combines a <a>header</a> in
  <a>author request headers</a>.

  <p>Throws an <code>InvalidStateError</code>
  exception if either <a>state</a> is not
  <i>opened</i> or the <a><code>send()</code> flag</a> is set.

  <p>Throws a <code>SyntaxError</code> exception if
  <var>name</var> is not a header name or if <var>value</var> is not a header value.

</dl>

<p class=note>As indicated in the algorithm below certain headers cannot
be set and are left up to the user agent. In addition there are certain
other headers the user agent will take control of if they are not set by
the author as indicated at the end of the
<a><code>send()</code></a> method section.

<p>The
<dfn id=dom-xmlhttprequest-setrequestheader lt="dom XMLHttpRequest setRequestHeader"><code>setRequestHeader(<var>name</var>, <var>value</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <a>state</a> is not
 <i>opened</i>, <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If the <a><code>send()</code> flag</a> is set,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p><a>Normalize</a>
 <var>value</var>.

 <li>
  <p>If <var>name</var> is not a
  <a>name</a> or <var>value</var>
  is not a <a>value</a>,
  <a lt=throw>throw</a> a
  <code>SyntaxError</code> exception.

  <p class="note no-backref">An empty byte sequence represents an empty
  <a>header</a>
  <a>value</a>.

 <li><p>Terminate these steps if <var>name</var> is a
 <a>forbidden header name</a>.

 <li><p><a>Combine</a>
 <var>name</var>/<var>value</var> in <a>author request headers</a>.
</ol>

<div id=example-setting-header-twice class=example>
 <p>Some simple code demonstrating what happens when setting the same
 header twice:

 <pre><code>// The following script:
var client = new XMLHttpRequest();
client.open('GET', 'demo.cgi');
client.setRequestHeader('X-Test', 'one');
client.setRequestHeader('X-Test', 'two');
client.send();

// …results in the following header being sent:
X-Test: one, two</code></pre>
</div>


<h4 id=the-timeout-attribute>The <code>timeout</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest timeout">timeout</a></code>
 <dd>
  <p>Can be set to a time in milliseconds. When set to a non-zero value
  will cause <a>fetching</a> to
  terminate after the given time has passed. When the time has passed, the request has
  not yet completed, and the <a>synchronous flag</a> is unset, a
  <a><code>timeout</code></a> event will then be
  <a>dispatched</a>,
  or a <code>TimeoutError</code> exception will be
  <a lt=throw>thrown</a> otherwise
  (for the <a><code>send()</code></a> method).
  <p>When set: throws an
  <code>InvalidAccessError</code> exception if
  the <a>synchronous flag</a> is set and
  <a>entry settings object</a>'s
  <a>global object</a> is a <code>Window</code>
  object.

</dl>

<p>The
<dfn id=dom-xmlhttprequest-timeout lt="dom XMLHttpRequest timeout"><code>timeout</code></dfn>
attribute must return its value. Initially its value must be zero.

<p>Setting the <a><code>timeout</code></a>
attribute must run these steps:

<ol>
 <li><p>If <a>entry settings object</a>'s
 <a>global object</a> is a <code>Window</code>
 object and the <a>synchronous flag</a> is set,
 <a lt=throw>throw</a> an
 <code>InvalidAccessError</code> exception.

 <li><p>Set its value to the new value.
</ol>

<p class=note>This implies that the
<a><code>timeout</code></a> attribute can be
set while <a>fetching</a> is in
progress. If that occurs it will still be measured relative to the start
of <a>fetching</a>.


<h4 id=the-withcredentials-attribute>The <code>withCredentials</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest withCredentials">withCredentials</a></code>
 <dd>
  <p>True when <a>user credentials</a> are to be included in a
  cross-origin request. False when they are to be excluded in a
  cross-origin request and when cookies are to be ignored in its response.
  Initially false.

  <p>When set: throws an
  <code>InvalidStateError</code> exception if
  <a>state</a> is not <i>unsent</i> or
  <i>opened</i>, or if the <a><code>send()</code> flag</a> is set.

</dl>

<p>The
<dfn lt="dom XMLHttpRequest withCredentials"><code>withCredentials</code></dfn>
attribute must return its value. Initially its value must be false.

<p>Setting the
<a><code>withCredentials</code></a>
attribute must run these steps:

<ol>
 <li><p>If <a>state</a> is not
 <i>unsent</i> or <i>opened</i>,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If the <a><code>send()</code> flag</a> is set,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>Set the <a><code>withCredentials</code></a>
 attribute's value to the given value.
</ol>

<p class=note>The <a><code>withCredentials</code></a>
attribute has no effect when
<a>fetching</a>
<a lt="same origin">same-origin</a> resources.


<h4 id=the-upload-attribute>The <code>upload</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest upload">upload</a></code>
 <dd><p>Returns the associated <code>XMLHttpRequestUpload</code>
 object. It can be used to gather transmission information when data is
 transferred to a server.
</dl>

<p>The
<dfn lt="dom XMLHttpRequest upload"><code>upload</code></dfn>
attribute must return the associated
<code>XMLHttpRequestUpload</code> object.

<p class=note>As indicated earlier, each <code>XMLHttpRequest</code>
object has an associated <code>XMLHttpRequestUpload</code> object.


<h4 id=the-send()-method>The <code>send()</code> method</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest send">send</a>([<var>body</var> = null])</code>
 <dd>
  <p>Initiates the request. The optional argument provides the
  <a>request body</a>. The argument is ignored if
  <a>request method</a> is <code>GET</code> or
  <code>HEAD</code>.

  <p>Throws an <code>InvalidStateError</code> exception if either
  <a>state</a> is not <i>opened</i> or the
  <a><code>send()</code> flag</a> is set.
</dl>

<p>The <dfn lt="dom XMLHttpRequest send"><code>send(<var>body</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <a>state</a> is not
 <i>opened</i>, <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If the <a><code>send()</code> flag</a> is set,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If the <a>request method</a> is <code>GET</code> or
 <code>HEAD</code>, set <var>body</var> to null.

 <li>
  <p>If <var>body</var> is null, go to the next step.

  <p>Otherwise, let <var>encoding</var> be null, <var>Content-Type</var> be null, and then
  follow these rules, depending on <var>body</var>:

  <dl class=switch>
   <dt id=dom-xmlhttprequest-send-document><code>Document</code>
   <dd>
    <p>Set <var>encoding</var> to `<code>UTF-8</code>`.

    <p>If <var>body</var> is an <a>HTML document</a>, set
    <var>Content-Type</var> to `<code>text/html</code>`, and set <var>Content-Type</var>
    to `<code>application/xml</code>` otherwise. Then append `<code>;charset=UTF-8</code>`
    to <var>Content-Type</var>.

    <p>Set <a>request body</a> to <var>body</var>,
    <a>serialized</a> with the
    <i>require well-formed flag</i> set,
    <a lt="convert a DOMString to a sequence of Unicode characters">converted to Unicode</a>,
    and <a lt="utf 8 encode">utf-8 encoded</a>.
    Rethrow any exceptions.

    <p class=note>If <var>body</var> cannot be
    <a>serialized</a>, an
    <code>InvalidStateError</code> exception is thrown.

   <dt id=dom-xmlhttprequest-send-bodyinit><code>BodyInit</code>
   <dd>
    <p>If <var>body</var> is a string, set <var>encoding</var> to
    `<code>UTF-8</code>`.

    <p>Set <a>request body</a> and <var>Content-Type</var> to the result of
    <a>extracting</a>
    <var>body</var>.
  </dl>

  <p>If <var>Content-Type</var> is non-null and <a>author request headers</a>
  contains no <a>header</a>
  <a>named</a>
  `<code>Content-Type</code>`,
  <a>append</a>
  `<code>Content-Type</code>`/<var>Content-Type</var> to
  <a>author request headers</a>.

  <p>Otherwise, if the <a>header</a>
  <a>named</a>
  `<code>Content-Type</code>` in <a>author request headers</a> has a
  <a>value</a> that is a
  <a>valid MIME type</a>, which has a
  `<code>charset</code>` parameter whose value is not a case-insensitive
  match for <var>encoding</var>, and <var>encoding</var>
  is not null, then set all the `<code>charset</code>` parameters whose value is not a
  case-insensitive match for <var>encoding</var> of that
  `<code>Content-Type</code>`
  <a>header</a>'s
  <a>value</a> to
  <var>encoding</var>.
  <!-- XXX could still be better with case-insensitive and parameter cross-ref -->

  <!-- reminder: if we ever change this to always include charset it has
  to be included as the first parameter for compatibility reasons -->

 <li><p>If one or more event listeners are registered on the associated
 <code>XMLHttpRequestUpload</code> object, then set <a>upload listener flag</a>.

 <li>
  <p>Let <var>req</var> be a new
  <a>request</a>, initialized as
  follows:

  <dl>
   <dt><a>method</a>
   <dd><a>request method</a>
   <dt><a>url</a>
   <dd><a>request URL</a>
   <dt><a>header list</a>
   <dd><a>author request headers</a>
   <dt><a>unsafe-request flag</a>
   <dd>Set.
   <dt><a>body</a>
   <dd><a>request body</a>
   <dt><a>client</a>
   <dd><a>context object</a>'s
   <a>relevant settings object</a>
   <dt><a>synchronous flag</a>
   <dd>Set if the <a>synchronous flag</a> is set.
   <dt><a>mode</a>
   <dd>"<code>cors</code>"
   <dt><a>use-CORS-preflight flag</a>
   <dd>Set if <a>upload listener flag</a> is set.
   <dt><a>credentials mode</a>
   <dd>If the <a><code>withCredentials</code></a>
   attribute value is true, "<code>include</code>", and "<code>same-origin</code>"
   otherwise.
   <dt><a>use URL credentials flag</a>
   <dd>Set if either <a>request URL</a>'s
   <a>username</a>
   is not the empty string or <a>request URL</a>'s
   <a>password</a> is non-null.
  </dl>

 <li><p>Unset the <a>upload complete flag</a>.

 <li><p>If <var>req</var>'s
 <a>body</a> is null,
 set the <a>upload complete flag</a>.

 <li><p>Set the <a><code>send()</code> flag</a>.

 <li>
  <p>If the <a>synchronous flag</a> is unset, run these substeps:

  <ol>
   <li><p><a>Fire a progress event</a> named <a><code>loadstart</code></a> with 0 and 0.

   <li><p>If the <a>upload complete flag</a> is unset and <a>upload listener flag</a> is
   set, then <a>fire a progress event</a> named
   <a><code>loadstart</code></a> on the
   <code>XMLHttpRequestUpload</code> object with 0 and <var>req</var>'s
   <a>body</a>'s
   <a>total bytes</a>.

   <li>
    <p><a>Fetch</a> <var>req</var>.
    Handle the <a>tasks</a>
    <a lt="queue a task">queued</a> on the
    <a>networking task source</a> per below.

    <p>Run these subsubsteps <a>in parallel</a>:

    <ol>
     <li><p>Let <var>milliseconds</var> be zero.

     <li>
      <p>Every millisecond, as long as the <a>stop timeout flag</a> is unset,
      <a>queue a microtask</a> to run these subsubsubsteps:

      <ol>
       <li><p>Increase <var>milliseconds</var> by one.

       <li><p>If <var>milliseconds</var> is equal or greater than
       the <a><code>timeout</code></a> attribute value and
       the <a><code>timeout</code></a> attribute value is not
       zero, <a>terminate</a>
       <a>fetching</a> with reason
       <i>timeout</i>.
      </ol>
    </ol>

    <p>To <a>process request body</a> for
    <var>request</var>, run these subsubsteps:

    <ol>
     <li><p>If not roughly 50ms have passed since these subsubsteps were last invoked,
     terminate these subsubsteps.

     <li><p>If <a>upload listener flag</a> is set, then
     <a>fire a progress event</a> named
     <a><code>progress</code></a> on the
     <code>XMLHttpRequestUpload</code> object with <var>request</var>'s
     <a>body</a>'s
     <a>transmitted bytes</a> and
     <var>request</var>'s
     <a>body</a>'s
     <a>total bytes</a>.
     <!-- upload complete flag can never be set here I hope -->
    </ol>

    <p class=note>These subsubsteps are only invoked when new bytes are transmitted.

    <p>To <a>process request end-of-body</a> for
    <var>request</var>, run these subsubsteps:

    <ol>
     <li><p>Set the <a>upload complete flag</a>.

     <li><p>If <a>upload listener flag</a> is unset, then terminate these subsubsteps.

     <li><p>Let <var>transmitted</var> be <var>request</var>'s
     <a>body</a>'s
     <a>transmitted bytes</a>.

     <li><p>Let <var>length</var> be <var>request</var>'s
     <a>body</a>'s
     <a>total bytes</a>.

     <li><p><a>Fire a progress event</a> named
     <a><code>progress</code></a> on the
     <code>XMLHttpRequestUpload</code> object with <var>transmitted</var> and
     <var>length</var>.

     <li><p><a>Fire a progress event</a> named
     <a><code>load</code></a> on the
     <code>XMLHttpRequestUpload</code> object with <var>transmitted</var> and
     <var>length</var>.

     <li><p><a>Fire a progress event</a> named
     <a><code>loadend</code></a> on the
     <code>XMLHttpRequestUpload</code> object with <var>transmitted</var> and
     <var>length</var>.
    </ol>
    <!-- upload complete flag can never be set here I hope -->

    <p>To <a>process response</a> for <var>response</var>,
    run these subsubsteps:

    <ol>
     <li><p>If the <a>stop timeout flag</a> is unset, set the
     <a>stop timeout flag</a>.

     <li><p>Set <a>response</a> to <var>response</var>.

     <li><p><a>Handle errors</a> for <var>response</var>.

     <li><p>If <a>response</a> is a
     <a>network error</a>,
     return.

     <li><p>Set <a>state</a> to
     <i>headers received</i>.

     <li><p><a>Fire an event</a> named
     <a><code>readystatechange</code></a>.

     <li><p>If <a>state</a> is not
     <i>headers received</i>, then return.

     <li><p>If <var>response</var>'s
     <a>body</a> is null,
     then run <a>handle response end-of-body</a> and return.

     <li>
      <p>Let <var>reader</var> be the result of
      <a>getting a reader</a> from
      <var>response</var>'s <a>body</a>'s
      <a>stream</a>.

      <p><a class="note no-backref">This operation will not throw an exception.</a>

     <li>
      <p>Let <var>read</var> be the result of
      <a>reading a chunk</a>
      from <var>response</var>'s
      <a>body</a>'s
      <a>stream</a> with <var>reader</var>.

      <p>When <var>read</var> is fulfilled with an object whose <code>done</code> property is false
      and whose <code>value</code> property is a <code>Uint8Array</code> object, run these
      subsubsubsteps and then run the above subsubstep again:

      <ol>
       <li><p>Append the <code>value</code> property to <a>received bytes</a>.

       <li><p>If not roughly 50ms have passed since these subsubsubsteps were last invoked,
       then terminate these subsubsubsteps.

       <li><p>If <a>state</a> is
       <i>headers received</i>, then set
       <a>state</a> to <i>loading</i>.

       <li>
        <p><a>Fire an event</a> named
        <a><code>readystatechange</code></a>.

        <p class="note no-backref">Web compatibility is the reason
        <a><code>readystatechange</code></a> fires more often than
        <a>state</a> changes.

       <li><p><a>Fire a progress event</a> named
       <a><code>progress</code></a> with <var>response</var>'s
       <a>body</a>'s
       <a>transmitted bytes</a> and
       <var>response</var>'s <a>body</a>'s
       <a>total bytes</a>.
      </ol>

      <p>When <var>read</var> is fulfilled with an object whose <code>done</code> property is true,
      run <a>handle response end-of-body</a> for <var>response</var>.

      <p>When <var>read</var> is rejected with an exception, run <a>handle errors</a> for
      <var>response</var>.
    </ol>
  </ol>

 <li>
  <p>Otherwise, if the <a>synchronous flag</a> is set, run these substeps:

  <ol>
   <li>
    <p>Let <var>response</var> be the result of
    <a>fetching</a> <var>req</var>.

    <p>If the <a><code>timeout</code></a> attribute value is not
    zero, <a>terminate</a> this
    <a>fetch</a> if it has not returned
    within the amount of milliseconds from the
    <a><code>timeout</code></a> attribute value with reason
    <i>timeout</i>.

   <li><p>If <var>response</var>'s
   <a>body</a> is null,
   then run <a>handle response end-of-body</a> and return.

   <li>
    <p>Let <var>reader</var> be the result of
    <a>getting a reader</a> from
    <var>response</var>'s <a>body</a>'s
    <a>stream</a>.

    <p><a class="note no-backref">This operation will not throw an exception.</a>

   <li><p>Let <var>promise</var> be the result of
   <a>reading all
   bytes</a> from <var>response</var>'s
   <a>body</a>'s
   <a>stream</a> with <var>reader</var>.

   <li><p>Wait for <var>promise</var> to be fulfilled or rejected.

   <li><p>If <var>promise</var> is fulfilled with <var>bytes</var>, then append <var>bytes</var>
   to <a>received bytes</a>.

   <li><p>Run <a>handle response end-of-body</a> for <var>response</var>.
  </ol>
</ol>

<p id=handle-response-end-of-file>To <dfn>handle response end-of-body</dfn> for
<var>response</var>, run these steps:

<ol>
 <li><p>If the <a>synchronous flag</a> is set, set <a>response</a> to
 <var>response</var>.

 <li><p><a>Handle errors</a> for <var>response</var>.

 <li><p>If <a>response</a> is a
 <a>network error</a>, return.

 <li><p>If the <a>synchronous flag</a> is unset, update <a>response</a>'s
 <a>body</a> using
 <var>response</var>.

 <li><p><a>Fire a progress event</a> named
 <a><code>progress</code></a> with <var>transmitted</var> and <var>length</var>.

 <li><p>Set <a>state</a> to <i>done</i>.

 <li><p>Unset the <a><code>send()</code> flag</a>.

 <li><p><a>Fire an event</a> named <a><code>readystatechange</code></a>.

 <li><p>Let <var>transmitted</var> be <var>response</var>'s
 <a>body</a>'s
 <a>transmitted bytes</a>.

 <li><p>Let <var>length</var> be <var>response</var>'s
 <a>body</a>'s
 <a>total bytes</a>.

 <li><p><a>Fire a progress event</a> named <a><code>load</code></a>
 with <var>transmitted</var> and <var>length</var>.

 <li><p><a>Fire a progress event</a> named <a><code>loadend</code></a>
 with <var>transmitted</var> and <var>length</var>.
</ol>

<p>To <dfn>handle errors</dfn> for <var>response</var> run these steps:

<ol>
 <li><p>If the <a><code>send()</code> flag</a> is unset, return.

 <li><p>If <var>response</var> is a
 <a>network error</a>, run the
 <a>request error steps</a> for event <a><code>error</code></a> and
 exception <code>NetworkError</code>.

 <li>
  <p>Otherwise, if <var>response</var> has a
  <a>termination reason</a>:

  <dl class=switch>
   <dt><i>end-user abort</i>
   <dd><p>Run the <a>request error steps</a> for event
   <a><code>abort</code></a> and exception
   <code>AbortError</code>.

   <dt><i>fatal</i>
   <dd>
    <ol>
     <li><p>Set <a>state</a> to
     <i>done</i>.

     <li><p>Unset the <a><code>send()</code> flag</a>.

     <li><p>Set <a>response</a> to a
     <a>network error</a>.
    </ol>

   <dt><i>timeout</i>
   <dd><p>Run the <a>request error steps</a> for event
   <a><code>timeout</code></a> and exception
   <code>TimeoutError</code>.
  </dl>
</ol>

<p>The <dfn>request error steps</dfn> for event <var>event</var> and optionally an
exception <var>exception</var> are:

<ol>
 <li><p>Set <a>state</a> to <i>done</i>.

 <li><p>Unset the <a><code>send()</code> flag</a>.

 <li><p>Set <a>response</a> to a
 <a>network error</a>.

 <li><p>If the <a>synchronous flag</a> is set,
 <a lt=throw>throw</a> an <var>exception</var>
 exception.

 <li>
  <p><a>Fire an event</a> named <a><code>readystatechange</code></a>.

  <p class=note>At this point it is clear that the <a>synchronous flag</a> is unset.

 <li>
  <p>If the <a>upload complete flag</a> is unset, follow these substeps:

  <ol>
   <li><p>Set the <a>upload complete flag</a>.

   <li><p>If <a>upload listener flag</a> is unset, then terminate these substeps.

   <li><p><a>Fire a progress event</a> named
   <var>event</var> on the <code>XMLHttpRequestUpload</code> object with 0 and 0.

   <li><p><a>Fire a progress event</a> named
   <a><code>loadend</code></a> on the <code>XMLHttpRequestUpload</code>
   object with 0 and 0.
  </ol>

 <li><p><a>Fire a progress event</a> named
 <var>event</var> with 0 and 0.

 <li><p><a>Fire a progress event</a> named
 <a><code>loadend</code></a> with 0 and 0.
</ol>


<h4 id=the-abort()-method>The <code>abort()</code> method</h4>

  <dl class=domintro>
   <dt><code><var>client</var> . <a lt="dom XMLHttpRequest abort">abort</a>()</code>
   <dd>Cancels any network activity.
  </dl>

<p>The <dfn lt="dom XMLHttpRequest abort"><code>abort()</code></dfn> method, when invoked, must
run these steps:

<ol>
 <li><p><a>Terminate the request</a>.

 <li><p>If <a>state</a> is either
 <i>opened</i> with the <a><code>send()</code> flag</a> set,
 <i>headers received</i>, or <i>loading</i>, run the
 <a>request error steps</a> for event <a><code>abort</code></a>.

 <li>
  <p>If <a>state</a> is <i>done</i>, set
  <a>state</a> to <i>unsent</i>.

  <p class=note>No <a><code>readystatechange</code></a> event
  is dispatched.
</ol>



<h3 id=xmlhttprequest-response>Response</h3>

<p>An <code>XMLHttpRequest</code> has an associated <dfn>response</dfn>. Unless stated
otherwise it is a
<a>network error</a>.

<p>An <code>XMLHttpRequest</code> also has an associated <dfn>received bytes</dfn> (a byte
sequence). Unless stated otherwise it is the empty byte sequence.

<h4 id=the-responseurl-attribute>The <code>responseURL</code> attribute</h4>

<p>The <dfn lt="dom XMLHttpRequest responseURL"><code>responseURL</code></dfn> attribute
must return the empty string if <a>response</a>'s
<a>url</a> is null and its
<a>serialization</a> with the
<i>exclude fragment flag</i> set otherwise.


<h4 id=the-status-attribute>The <code>status</code> attribute</h4>

<p>The
<dfn lt="dom XMLHttpRequest status"><code>status</code></dfn>
attribute must return the <a>response</a>'s
<a>status</a>.


<h4 id=the-statustext-attribute>The <code>statusText</code> attribute</h4>

<p>The
<dfn lt="dom XMLHttpRequest statusText"><code>statusText</code></dfn>
attribute must return the <a>response</a>'s
<a>status message</a>.


<h4 id=the-getresponseheader()-method>The <code>getResponseHeader()</code> method</h4>

<p>The
<dfn lt="dom XMLHttpRequest getResponseHeader"><code>getResponseHeader(<var>name</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <a>response</a>'s
 <a>header list</a> has <em>no</em>
 <a>header</a> whose
 <a>name</a> is <var>name</var>, then return
 null.

 <li><p>Return the
 <a>combined value</a> given
 <var>name</var> and <a>response</a>'s
 <a>header list</a>.
</ol>

<p class="note no-backref">The Fetch Standard filters <a>response</a>'s
<a>header list</a>.
[[!FETCH]]

<div id=example-getresponseheader class=example>

 <p>For the following script:

 <pre><code>var client = new XMLHttpRequest();
client.open("GET", "unicorns-are-teh-awesome.txt", true);
client.send();
client.onreadystatechange = function() {
  if(this.readyState == this.HEADERS_RECEIVED) {
    print(client.getResponseHeader("Content-Type"));
  }
}</code></pre>

 <p>The <code>print()</code> function will get to process something
 like:

 <pre><code>text/plain; charset=UTF-8</code></pre>
</div>


<h4 id=the-getallresponseheaders()-method>The <code>getAllResponseHeaders()</code> method</h4>

<p>The
<dfn lt="dom XMLHttpRequest getAllResponseHeaders"><code>getAllResponseHeaders()</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>Let <var>output</var> be an empty byte sequence.

 <li><p>Let <var>headers</var> be the result of running
 <a>sort and combine</a>
 with <a>response</a>'s
 <a>header list</a>.

 <li>
  <p>For each <var>header</var> in <var>headers</var>, run these substeps:

  <ol>
   <li><p>Append <var>header</var>'s
   <a>name</a>, followed by a 0x3A 0x20 byte
   pair, followed by <var>header</var>'s
   <a>value</a>, to <var>output</var>.

   <li><p>If <var>header</var> is not the last pair in <var>headers</var>, then append a 0x0D 0x0A
   byte pair, to <var>output</var>.
  </ol>

 <li><p>Return <var>output</var>.
</ol>

<p class="note no-backref">The Fetch Standard filters <a>response</a>'s
<a>header list</a>.
[[!FETCH]]

<div id=example-getresponseheaders class=example>
 <p>For the following script:

 <pre><code>var client = new XMLHttpRequest();
client.open("GET", "narwhals-too.txt", true);
client.send();
client.onreadystatechange = function() {
  if(this.readyState == this.HEADERS_RECEIVED) {
    print(this.getAllResponseHeaders());
  }
}</code></pre>

 <p>The <code>print()</code> function will get to process something
 like:

 <pre><code>Date: Sun, 24 Oct 2004 04:58:38 GMT
Server: Apache/1.3.31 (Unix)
Keep-Alive: timeout=15, max=99
Connection: Keep-Alive
Transfer-Encoding: chunked
Content-Type: text/plain; charset=utf-8</code></pre>
</div>


<h4 id=response-body>Response body</h4>

<p>The <dfn id=response-mime-type>response MIME type</dfn> is the
MIME type the `<code>Content-Type</code>` header contains excluding any
parameters and
<a>converted to ASCII lowercase</a>, or null if
the response header can not be parsed or was omitted. The
<dfn id=override-mime-type>override MIME type</dfn> is initially null
and can get a value if
<a><code>overrideMimeType()</code></a>
is invoked. <dfn id=final-mime-type>Final MIME type</dfn> is the
<a>override MIME type</a> unless that is null in which case it is
the <a>response MIME type</a>.

<p>The <dfn id=response-charset>response charset</dfn> is the value of
the <code>charset</code> parameter of the `<code>Content-Type</code>` header
or null if there was no `<code>charset</code>` parameter or the header could
not be parsed or was omitted. The
<dfn id=override-charset>override charset</dfn> is initially null and
can get a value if <a><code>overrideMimeType()</code></a> is invoked.
<dfn id=final-charset>Final charset</dfn> is the
<a>override charset</a> unless
that is null in which case it is the <a>response charset</a>.

<hr>

<p>An <code>XMLHttpRequest</code> object has an associated
<dfn>response <code>ArrayBuffer</code> object</dfn>,
<dfn>response <code>Blob</code> object</dfn>,
<dfn>response <code>Document</code> object</dfn>, and a
<dfn>response JSON object</dfn>. Their shared initial value is null.


<p>An <dfn>arraybuffer response</dfn> is the return value of these steps:

<ol>
 <li><p>If <a>response <code>ArrayBuffer</code> object</a> is non-null, return it.

 <li>
  <p>Set <a>response <code>ArrayBuffer</code> object</a> to a new <code>ArrayBuffer</code>
  object representing <a>received bytes</a>. If this throws an exception, then set
  <a>response <code>ArrayBuffer</code> object</a> to null and set <a>received bytes</a>
  to the empty byte sequence.

  <p class=note>Allocating an <code>ArrayBuffer</code> buffer is not guaranteed to succeed.
  [[!ECMASCRIPT]]

 <li><p>Return <a>response <code>ArrayBuffer</code> object</a>.
</ol>


<p>A <dfn>blob response</dfn> is the return value of these steps:

<ol>
 <li><p>If <a>response <code>Blob</code> object</a> is non-null, return it.

 <li><p>Let <var>type</var> be the empty string, if <a>final MIME type</a> is
 null, and <a>final MIME type</a> otherwise.

 <li><p>Set <a>response <code>Blob</code> object</a> to a new
 <code>Blob</code> object representing <a>received bytes</a> with
 <a><code>type</code></a> <var>type</var> and
 return it.
</ol>


<p>A <dfn>document response</dfn> is the return value of these steps:

<ol>
 <li><p>If <a>response <code>Document</code> object</a> is non-null, return it.

 <li><p>If <a>response</a>'s
 <a>body</a> is null, then return null.

 <li><p>If <a>final MIME type</a> is not null,
 <code>text/html</code>, <code>text/xml</code>,
 <code>application/xml</code>, or does not end in
 <code>+xml</code>, return null.

 <li>
  <p>If <a><code>responseType</code></a> is
  the empty string and <a>final MIME type</a> is
  <code>text/html</code>, return null.

  <p class=note>This is restricted to
  <a><code>responseType</code></a> being
  "<code>document</code>" in order to prevent breaking legacy
  content.

 <li>
  <p>If <a>final MIME type</a> is <code>text/html</code>, run these
  substeps:

  <ol>
   <li><p>Let <var>charset</var> be the <a>final charset</a>.

   <li><p>If <var>charset</var> is null,
   <a lt="prescan a byte stream to determine its encoding">prescan</a>
   the first 1024 bytes of <a>received bytes</a> and if
   that does not terminate unsuccessfully then let <var>charset</var> be
   the return value.

   <li><p>If <var>charset</var> is null, set <var>charset</var> to
   <a>utf-8</a>.

   <li><p>Let <var>document</var> be a
   <a>document</a> that
   represents the result parsing <a>received bytes</a> following the rules set
   forth in the HTML Standard for an HTML parser with scripting disabled and
   <a>a known definite encoding</a> <var>charset</var>.
   [[!HTML]]

   <li><p>Flag <var>document</var> as an
   <a>HTML document</a>.
  </ol>

 <li>
  <p>Otherwise, let <var>document</var> be a
  <a>document</a>
  that represents the result of running the <a>XML parser</a>
  with <a>XML scripting support disabled</a> on
  <a>received bytes</a>. If that fails (unsupported character encoding,
  namespace well-formedness error, etc.), then return null.
  [[!HTML]]

  <p class=note>Resources referenced will not be loaded and no associated XSLT will be
  applied. <!-- XXX more formally?! -->

 <li><p>If <var>charset</var> is null, set <var>charset</var> to
 <a>utf-8</a>.
 <!-- can only happen in the XML case -->

 <li><p>Set <var>document</var>'s
 <a>encoding</a> to
 <var>charset</var>.

 <li><p>Set <var>document</var>'s
 <a>content type</a>
 to <a>final MIME type</a>.

 <li><p>Set <var>document</var>'s
 <a>URL</a> to
 <a>response</a>'s
 <a>url</a>.

 <li><p>Set <var>document</var>'s <a>origin</a> to
 <a>context object</a>'s
 <a>relevant settings object</a>'s
 <a>origin</a>.

 <li><p>Set <a>response <code>Document</code> object</a> to
 <var>document</var> and return it.
</ol>


<p>A <dfn>JSON response</dfn> is the return value of these steps:

<ol>
 <li><p>If <a>response JSON object</a> is non-null, return it.

 <li><p>If <a>response</a>'s
 <a>body</a> is null, then return null.

 <li><p>Let <var>JSON text</var> be the result of running
 <a>utf-8 decode</a> on <a>received bytes</a>.

 <li><p>Let <var>JSON object</var> be the result of invoking the initial value of the
 <code>parse</code> property of the <code>JSON</code> object, with
 <var>JSON text</var> as its only argument. If that threw an exception, return null.
 [[!ECMASCRIPT]]

 <li><p>Set <a>response JSON object</a> to <var>JSON object</var> and return it.
</ol>


<p>A <dfn>text response</dfn> is the return value of these steps:

<ol>
 <li><p>If <a>response</a>'s
 <a>body</a> is null, then return the
 empty string.

 <li><p>Let <var>charset</var> be the <a>final charset</a>.

 <li>
  <p>If <a><code>responseType</code></a> is
  the empty string, <var>charset</var> is null, and
  <a>final MIME type</a> is either null, <code>text/xml</code>,
  <code>application/xml</code> or ends in <code>+xml</code>, use the
  rules set forth in the XML specifications to determine the encoding. Let
  <var>charset</var> be the determined encoding.
  [[!XML]] [[!XMLNS]]

  <p class=note>This is restricted to
  <a><code>responseType</code></a> being
  the empty string to keep the non-legacy
  <a><code>responseType</code></a> value
  "<code>text</code>" simple.

 <li><p>If <var>charset</var> is null, set <var>charset</var> to
 <a>utf-8</a>.

 <li><p>Return the result of running
 <a>decode</a> on <a>received bytes</a> using fallback
 encoding <var>charset</var>.
</ol>

<p class=note>Authors are strongly encouraged to always encode their
resources using <a>utf-8</a>.



<h4 id=the-overridemimetype()-method>The <code>overrideMimeType()</code> method</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest overrideMimeType">overrideMimeType</a>(<var>mime</var>)</code>
 <dd>
  <p>Sets the `<code>Content-Type</code>` header for <a>response</a> to
  <var>mime</var>.

  <p>Throws an <code>InvalidStateError</code> exception if
  <a>state</a> is
  <i>loading</i> or <i>done</i>.

  <p>Throws a <code>SyntaxError</code> exception if
  <var>mime</var> is not a valid MIME type.

</dl>

<p>The
<dfn lt="dom XMLHttpRequest overrideMimeType"><code>overrideMimeType(<var>mime</var>)</code></dfn>
method must run these steps:

<ol>
 <li><p>If <a>state</a> is
 <i>loading</i> or <i>done</i>,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If parsing <var>mime</var> analogously to the value of
 the `<code>Content-Type</code>` header fails,
 <a lt=throw>throw</a> a
 <code>SyntaxError</code> exception.

 <li><p>If <var>mime</var> is successfully parsed, set
 <a>override MIME type</a> to its MIME type,
 excluding any parameters, and
 <a>converted to ASCII lowercase</a>.

 <li><p>If a `<code>charset</code>` parameter is successfully parsed, set
 <a>override charset</a> to its value.
</ol>



<h4 id=the-responsetype-attribute>The <code>responseType</code> attribute</h4>


<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest responseType">responseType</a></code> [ = <var>value</var> ]
 <dd>
  <p>Returns the response type.
  <p>Can be set to change the response type. Values are:
  the empty string (default),
  "<code>arraybuffer</code>",
  "<code>blob</code>",
  "<code>document</code>",
  "<code>json</code>", and
  "<code>text</code>".
  <p>When set: setting to "<code>document</code>" is ignored if
  <a>entry settings object</a>'s
  <a>global object</a> is <em>not</em> a
  <code>Window</code> object.
  <p>When set: throws an
  <code>InvalidStateError</code> exception if
  <a>state</a> is <i>loading</i> or
  <i>done</i>.
  <p>When set: throws an
  <code>InvalidAccessError</code> exception if the
  <a>synchronous flag</a> is set and
  <a>entry settings object</a>'s
  <a>global object</a> is a <code>Window</code>
  object.
</dl>


<p>The
<dfn lt="dom XMLHttpRequest responseType"><code>responseType</code></dfn>
attribute must return its value. Initially its value must be the empty
string.

<p>Setting the
<a><code>responseType</code></a>
attribute must run these steps:

<ol>
 <li><p>If <a>entry settings object</a>'s
 <a>global object</a> is <em>not</em> a
 <code>Window</code> object and the given value is
 "<code>document</code>", terminate these steps.

 <li><p>If <a>state</a> is
 <i>loading</i> or <i>done</i>,
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If <a>entry settings object</a>'s
 <a>global object</a> is a <code>Window</code>
 object and the <a>synchronous flag</a> is set,
 <a lt=throw>throw</a> an
 <code>InvalidAccessError</code> exception.

 <li><p>Set the
 <a><code>responseType</code></a>
 attribute's value to the given value.
</ol>




<h4 id=the-response-attribute>The <code>response</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest response">response</a></code>
 <dd><p>Returns the <a>response</a>'s
 <a>body</a>.
</dl>

<p>The
<dfn lt="dom XMLHttpRequest response"><code>response</code></dfn>
attribute must return the result of running these
steps:

<dl class=switch>
 <dt>If <a><code>responseType</code></a>
 is the empty string or "<code>text</code>"
 <dd>
  <ol>
   <li><p>If <a>state</a> is not
   <i>loading</i> or <i>done</i>, return the empty string.

   <li><p>Return the <a>text response</a>.
  </ol>

 <dt>Otherwise
 <dd>
  <ol>
   <li><p>If <a>state</a> is not
   <i>done</i>, return null.

   <li>
    <dl class=switch>
     <dt>If
     <a><code>responseType</code></a> is
     "<code>arraybuffer</code>"
     <dd><p>Return the <a>arraybuffer response</a>.

     <dt>If
     <a><code>responseType</code></a> is
     "<code>blob</code>"
     <dd><p>Return the <a>blob response</a>.

     <dt>If
     <a><code>responseType</code></a> is
     "<code>document</code>"
     <dd><p>Return the <a>document response</a>.

     <dt>If
     <a><code>responseType</code></a> is
     "<code>json</code>"
     <dd><p>Return the <a>JSON response</a>.
    </dl>
  </ol>
</dl>



<h4 id=the-responsetext-attribute>The <code>responseText</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest responseText">responseText</a></code>
 <dd>
  <p>Returns the <a>text response</a>.

  <p>Throws an <code>InvalidStateError</code>
  exception if
  <a><code>responseType</code></a> is not
  the empty string or "<code>text</code>".
</dl>

<p>The
<dfn lt="dom XMLHttpRequest responseText"><code>responseText</code></dfn>
attribute must return the result of running these
steps:

<ol>

 <li><p>If <a><code>responseType</code></a> is not the
 empty string or "<code>text</code>",
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.


 <li><p>If <a>state</a> is not
 <i>loading</i> or <i>done</i>, return the empty string.

 <li><p>Return the <a>text response</a>.
</ol>


<h4 id=the-responsexml-attribute>The <code>responseXML</code> attribute</h4>

<dl class=domintro>
 <dt><code><var>client</var> . <a lt="dom XMLHttpRequest responseXML">responseXML</a></code>
 <dd>
  <p>Returns the <a>document response</a>.

  <p>Throws an <code>InvalidStateError</code>
  exception if
  <a><code>responseType</code></a> is not
  the empty string or "<code>document</code>".
</dl>

<p>The
<dfn lt="dom XMLHttpRequest responseXML"><code>responseXML</code></dfn>
attribute must return the result of running these steps:

<ol>
 <li><p>If
 <a><code>responseType</code></a> is not
 the empty string or "<code>document</code>",
 <a lt=throw>throw</a> an
 <code>InvalidStateError</code> exception.

 <li><p>If <a>state</a> is not <i>done</i>,
 return null.

 <li><p>Return the <a>document response</a>.
</ol>

<p class=note>The
<a><code>responseXML</code></a> attribute
has XML in its name for historical reasons. It also returns HTML resources
as <a>documents</a>.


<h3 id=events>Events summary</h3>

<p><em>This section is non-normative.</em>

<p>The following events are dispatched on <code>XMLHttpRequest</code>
and/or <code>XMLHttpRequestUpload</code> objects:

<table>
 <thead>
  <tr>
   <th>Event name
   <th>Interface
   <th>Dispatched when…
 <tbody>
  <tr>
   <td><dfn lt="event xhr readystatechange"><code>readystatechange</code></dfn>
   <td><code>Event</code>
   <td>The <a><code>readyState</code></a> attribute changes
   value, except when it changes to <a lt="dom XMLHttpRequest UNSENT">UNSENT</a>.
  <tr>
   <td><dfn lt="event xhr loadstart"><code>loadstart</code></dfn>
   <td><code>ProgressEvent</code>
   <td>The fetch initiates.
  <tr>
   <td><dfn lt="event xhr progress"><code>progress</code></dfn>
   <td><code>ProgressEvent</code>
   <td>Transmitting data.
  <tr>
   <td><dfn lt="event xhr abort"><code>abort</code></dfn>
   <td><code>ProgressEvent</code>
   <td>When the fetch has been aborted. For instance, by invoking the
   <a><code>abort()</code></a> method.
  <tr>
   <td><dfn lt="event xhr error"><code>error</code></dfn>
   <td><code>ProgressEvent</code>
   <td>The fetch failed.
  <tr>
   <td><dfn lt="event xhr load"><code>load</code></dfn>
   <td><code>ProgressEvent</code>
   <td>The fetch succeeded.
  <tr>
   <td><dfn lt="event xhr timeout"><code>timeout</code></dfn>
   <td><code>ProgressEvent</code>
   <td>The author specified timeout has passed before the fetch completed.
  <tr>
   <td><dfn lt="event xhr loadend"><code>loadend</code></dfn>
   <td><code>ProgressEvent</code>
   <td>The fetch completed (success or failure).
</table>



<h2 id=interface-formdata>Interface <code>FormData</code></h2>

<pre class=idl>typedef (<a>File</a> or USVString) <dfn>FormDataEntryValue</dfn>;

[<a lt="dom FormData">Constructor</a>(optional <a>HTMLFormElement</a> <var>form</var>),
 Exposed=(Window,Worker)]
interface <dfn>FormData</dfn> {
  void <a lt="dom FormData append">append</a>(USVString <var>name</var>, USVString <var>value</var>);
  void <a lt="dom FormData append">append</a>(USVString <var>name</var>, <a>Blob</a> <var>value</var>, optional USVString <var>filename</var>);
  void <a lt="dom FormData delete">delete</a>(USVString <var>name</var>);
  <a>FormDataEntryValue</a>? <a lt="dom FormData get">get</a>(USVString <var>name</var>);
  sequence&lt;<a>FormDataEntryValue</a>> <a lt="dom FormData getAll">getAll</a>(USVString <var>name</var>);
  boolean <a lt="dom FormData has">has</a>(USVString <var>name</var>);
  void <a lt="dom FormData append">set</a>(USVString <var>name</var>, USVString <var>value</var>);
  void <a lt="dom FormData append">set</a>(USVString <var>name</var>, <a>Blob</a> <var>value</var>, optional USVString <var>filename</var>);
  iterable&lt;USVString, <a>FormDataEntryValue</a>>;
};</pre>

<p>The <code>FormData</code> object represents an ordered list of
<dfn>entries</dfn>. Each
<a>entry</a> consists of a
<dfn>name</dfn> and a
<dfn>value</dfn>.

<p>For the purposes of interaction with other algorithms, an
<a>entry</a>'s type is "string" if its
<a>value</a> is a string and "file" otherwise. If
an <a>entry</a>'s type is "file", its filename is
the empty string if <a>value</a> is not
a <code>File</code> object, and otherwise its filename is the
value of <a>entry</a>'s
<a>value</a>'s
<a><code>name</code></a> attribute.

<p>To <dfn>create an entry</dfn> for <var>name</var>, <var>value</var>, and optionally a
<var>filename</var>, run these steps:

<ol>
 <li><p>Let <var>entry</var> be a new <a>entry</a>.

 <li><p>Set <var>entry</var>'s <a>name</a> to
 <var>name</var>.

 <li><p>If <var>value</var> is a <code>Blob</code> object and not a
 <code>File</code> object, then set <var>value</var> to a new
 <code>File</code> object, representing the same bytes, whose
 <a><code>name</code></a> attribute value is
 "<code>blob</code>".
 <!-- XXX at some point File API should get internal slots for this -->

 <li><p>If <var>value</var> is (now) a <code>File</code> object and
 <var>filename</var> is given, then set <var>value</var> to a new
 <code>File</code> object, representing the same bytes, whose
 <a><code>name</code></a> attribute value is
 <var>filename</var>.

 <li><p>Set <var>entry</var>'s <a>value</a> to
 <var>value</var>.

 <li><p>Return <var>entry</var>.
</ol>

<hr>

<p>The
<dfn lt="dom FormData"><code>FormData(<var>form</var>)</code></dfn>
constructor must run these steps:

<ol>
 <li><p>Let <var>fd</var> be a new <code>FormData</code> object.

 <li><p>If <var>form</var> is given, set <var>fd</var>'s
 <a>entries</a> to the result of
 <a>constructing the form data set</a> for <var>form</var>.

 <li><p>Return <var>fd</var>.
</ol>

<p>The
<dfn id=dom-formdata-append lt="dom FormData append"><code>append(<var>name</var>, <var>value</var>, <var>filename</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>Let <var>entry</var> be the result of <a lt="create an entry">creating an entry</a>
 with <var>name</var>, <var>value</var>, and <var>filename</var> if given.

 <li><p>Append <var>entry</var> to <a>context object</a>'s list of
 <a>entries</a>.
</ol>

<p>The
<dfn lt="dom FormData delete"><code>delete(<var>name</var>)</code></dfn>
method, when invoked, must remove all <a>entries</a>
whose <a>name</a> is <var>name</var>.

<p>The <dfn lt="dom FormData get"><code>get(<var>name</var>)</code></dfn> method, when
invoked, must return the <a>value</a> of the first
<a>entry</a> whose
<a>name</a> is <var>name</var>, and null
otherwise.

<p>The <dfn lt="dom FormData getAll"><code>getAll(<var>name</var>)</code></dfn> method,
when invoked, must return the <a>values</a> of
all <a>entries</a> whose
<a>name</a> is <var>name</var>, in list order, and
the empty sequence otherwise.

<p>The <dfn lt="dom FormData has"><code>has(<var>name</var>)</code></dfn> method, when
invoked, must return true if there is an <a>entry</a>
whose <a>name</a> is <var>name</var>, and false
otherwise.

<p>The
<dfn lt="dom FormData set"><code>set(<var>name</var>, <var>value</var>, <var>filename</var>)</code></dfn>
method, when invoked, must run these steps:

<ol>
 <li><p>Let <var>entry</var> be the result of <a lt="create an entry">creating an entry</a>
 with <var>name</var>, <var>value</var>, and <var>filename</var> if given.

 <li><p>If there are any <a>entries</a> in
 <a>context object</a>'s list of
 <a>entries</a> whose
 <a>name</a> is <var>name</var>, then replace the first such
 <a>entry</a> with <var>entry</var> and remove the others.

 <li><p>Otherwise, append <var>entry</var> to <a>context object</a>'s
 list of <a>entries</a>.
</ol>

<p>The <a>value pairs to iterate over</a> are the
<a>entries</a> with the key being the
<a>name</a> and the value the
<a>value</a>.



<h2 id=interface-progressevent>Interface <code>ProgressEvent</code></h2>

<pre class=idl>[<a>Constructor</a>(DOMString <var>type</var>, optional <a>ProgressEventInit</a> <var>eventInitDict</var>),
 Exposed=(Window,DedicatedWorker,SharedWorker)]
interface <dfn>ProgressEvent</dfn> : <a>Event</a> {
  readonly attribute boolean <a lt="dom ProgressEvent lengthComputable">lengthComputable</a>;
  readonly attribute unsigned long long <a lt="dom ProgressEvent loaded">loaded</a>;
  readonly attribute unsigned long long <a lt="dom ProgressEvent total">total</a>;
};

dictionary <dfn>ProgressEventInit</dfn> : <a>EventInit</a> {
  boolean <a lt="dom ProgressEventInit lengthComputable">lengthComputable</a> = false;
  unsigned long long <a lt="dom ProgressEventInit loaded">loaded</a> = 0;
  unsigned long long <a lt="dom ProgressEventInit total">total</a> = 0;
};</pre>

<p><a>Events</a> using
the <code>ProgressEvent</code> interface indicate some kind of
progression.

<p>The
<dfn id=dom-progressevent-lengthcomputable lt="dom ProgressEvent lengthComputable"><code>lengthComputable</code></dfn>,
<dfn id=dom-progressevent-loaded lt="dom ProgressEvent loaded"><code>loaded</code></dfn>, and
<dfn id=dom-progressevent-total lt="dom ProgressEvent total"><code>total</code></dfn>
attributes must return the value they were initialized to.


<h3 id=firing-events-using-the-progressevent-interface>Firing events using the <code>ProgressEvent</code> interface</h3>

<p>To
<dfn>fire a progress event named <var>e</var></dfn>
given <var>transmitted</var> and <var>length</var>,
<a>fire an event named <var>e</var></a>
with an <a>event</a>
using the <code>ProgressEvent</code> interface that also meets these
conditions:

<ul class=brief>
 <li><p>Set the <a><code>loaded</code></a> attribute value to
 <var>transmitted</var>.

 <li><p>If <var>length</var> is not 0, set the
 <a><code>lengthComputable</code></a> attribute value to
 true and the <a><code>total</code></a> attribute value to
 <var>length</var>.
</ul>


<h3 id=suggested-names-for-events-using-the-progressevent-interface>Suggested names for events using the <code>ProgressEvent</code> interface</h3>

<p><em>This section is non-normative.</em>

<p>The suggested <a><code>type</code></a>
attribute values for use with
<a>events</a> using the
<code>ProgressEvent</code> interface are summarized in the table below.
Specification editors are free to tune the details to their specific
scenarios, though are strongly encouraged to discuss their usage with the
WHATWG community to ensure input from people familiar with the subject.

<table>
 <tbody>
  <tr>
   <th><a><code>type</code></a> attribute value
   <th>Description
   <th>Times
   <th>When
  <tr>
   <th><code>loadstart</code>
   <td>Progress has begun.
   <td>Once.
   <td>First.
  <tr>
   <th><code>progress</code>
   <td>In progress.
   <td>Once or more.
   <td>After <code>loadstart</code> has been
    <a>dispatched</a>.
  <tr>
   <th><code>error</code>
   <td>Progression failed.
   <td rowspan=4>Zero or once (mutually exclusive).
   <td rowspan=4>After the last <code>progress</code> has
    been
    <a>dispatched</a>.
  <tr>
   <th><code>abort</code>
   <td>Progression is terminated.
  <tr>
   <th><code>timeout</code>
   <td>Progression is terminated due to preset time expiring.
  <tr>
   <th><code>load</code>
   <td>Progression is successful.
  <tr>
   <th><code>loadend</code>
   <td>Progress has stopped.
   <td>Once.
   <td>After one of <code>error</code>, <code>abort</code>,
    <code>timeout</code> or <code>load</code> has been
    <a>dispatched</a>.
</table>

<p>The <code>error</code>, <code>abort</code>, <code>timeout</code>, and
<code>load</code> event types are mutually exclusive.

<p>Throughout the web platform the <code>error</code>, <code>abort</code>,
<code>timeout</code> and <code>load</code> event types have
their <a><code>bubbles</code></a> and
<a><code>cancelable</code></a>
attributes initialized to false, so it is suggested that for consistency all
<a>events</a> using the
<code>ProgressEvent</code> interface do the same.


<h3 id=security-considerations>Security Considerations</h3>

<p>For cross-origin requests some kind of opt-in, e.g. the
<a>CORS protocol</a> defined in the Fetch Standard, has to be
used before <a>events</a> using the
<code>ProgressEvent</code> interface are
<a>dispatched</a>
as information (e.g. size) would be revealed that cannot be obtained
otherwise. [[!FETCH]]


<h3 id=example>Example</h3>

<div id=example-progress-events class=example>
 <p>In this example <code>XMLHttpRequest</code>, combined with concepts
 defined in the sections before, and the HTML
 <code>progress</code> element are used together to
 display the process of
 <a>fetching</a> a resource.

 <pre>&lt;!DOCTYPE html>
&lt;title>Waiting for Magical Unicorns&lt;/title>
&lt;progress id=p>&lt;/progress>
&lt;script>
  var progressBar = document.getElementById("p"),
      client = new XMLHttpRequest()
  client.open("GET", "magical-unicorns")
  client.onprogress = function(pe) {
    if(pe.lengthComputable) {
      progressBar.max = pe.total
      progressBar.value = pe.loaded
    }
  }
  client.onloadend = function(pe) {
    progressBar.value = pe.loaded
  }
  client.send()
&lt;/script></pre>

 <p>Fully working code would of course be more elaborate and deal with more
 scenarios, such as network errors or the end user terminating the request.
</div>



<h2 class=no-num>References</h2>
<div id=anolis-references></div>



<h2 class=no-num id=acknowledgments>Acknowledgments</h2>

<p>Thanks to
Addison Phillips,
Adrian Bateman,
Ahmed Kamel,
Alan Thomas,
Alex Hopmann,
Alex Vincent,
Alexey Proskuryakov,
Andrea Marchesini,
Asbjørn Ulsberg,
Bertrand Guay-Paquet,
Björn Höhrmann,
Boris Zbarsky,
Caitlin Potter,
Cameron McCormack,
Chris Marrin,
Christophe Jolif,
Charles McCathieNevile,
Dan Winship,
David Andersson,
David Flanagan,
David Håsäther,
David Levin,
Dean Jackson,
Denis Sureau,
Domenic Denicola,
Dominik Röttsches,
Doug Schepers,
Douglas Livingstone,
Elliott Sprehn,
Elliotte Harold,
Eric Lawrence,
Eric Uhrhane,
Erik Arvidsson,
Erik Dahlström,
Feras Moussa,
Geoffrey Sneddon,
Gideon Cohn,
Glenn Adams,
Gorm Haug Eriksen,
Håkon Wium Lie,
Hallvord R. M. Steen,
Henri Sivonen,
Hiroshige Hayashizaki,
Huub Schaeks,
Ian Davis,
Ian Hickson,
Ivan Herman,
Jake Archibald,
Jared Jacobs,
Jarred Nicholls,
Jeff Walden,
Jens Lindström,
Jim Deegan,
Jim Ley,
Joe Farro,
Jonas Sicking,
Julian Reschke,
송정기 (Jungkee Song),
呂康豪 (Kang-Hao Lu),
Karl Dubost,
Keith Yeung,
Lachlan Hunt,
Maciej Stachowiak,
Magnus Kristiansen,
Manish Goregaokar,
Marc Hadley,
Marcos Caceres,
Mark Baker,
Mark Birbeck,
Mark Nottingham,
Mark S. Miller,
Martin Hassman,
Mohamed Zergaoui,
Ms2ger,
Odin Hørthe Omdal,
Olli Pettay,
Pawel Glowacki,
Peter Michaux,
Philip Jägenstedt,
Philip Taylor,
Robin Berjon,
Rune <a lt=Fabulous>F.</a> Halvorsen,
Ruud Steltenpool,
Sergiu Dumitriu,
Shivakumar Jagalur Matt,
Sigbjørn Finne,
Simon Pieters,
Stewart Brodie,
Sunava Dutta,
Takeshi Kurosawa,
Takeshi Yoshino,
Thomas Roessler,
Thomas Wisniewski,
Tom Magliery,
Travis Leithead,
Yehuda Katz,
Youenn Fablet, and
Zhenbin Xu
for their contributions to this standard.

<p>Special thanks to the Microsoft employees who first implemented the
<code>XMLHttpRequest</code> interface, which was first widely deployed by the
Windows Internet Explorer browser.

<p>Special thanks to Ian Hickson for drafting an initial version of this specification in
the HTML Standard (then Web Applications 1.0). [[!HTML]]

<p>Special thanks to the W3C SVG WG for drafting the original
<code>ProgressEvent</code> class as part of the
<a href=https://www.w3.org/TR/2008/REC-SVGTiny12-20081222/svgudom.html>SVG Micro DOM</a>.

<p>This standard is written by
<a href=https://annevankesteren.nl/ lang=nl>Anne van Kesteren</a>
(<a href=https://www.mozilla.org/>Mozilla</a>,
<a href=mailto:annevk@annevk.nl>annevk@annevk.nl</a>).

<p>Per <a rel=license href=https://creativecommons.org/publicdomain/zero/1.0/>CC0</a>, to
the extent possible under law, the editor has waived all copyright and related or
neighboring rights to this work.
